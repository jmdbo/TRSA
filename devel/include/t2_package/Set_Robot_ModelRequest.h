// Generated by gencpp from file t2_package/Set_Robot_ModelRequest.msg
// DO NOT EDIT!


#ifndef T2_PACKAGE_MESSAGE_SET_ROBOT_MODELREQUEST_H
#define T2_PACKAGE_MESSAGE_SET_ROBOT_MODELREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace t2_package
{
template <class ContainerAllocator>
struct Set_Robot_ModelRequest_
{
  typedef Set_Robot_ModelRequest_<ContainerAllocator> Type;

  Set_Robot_ModelRequest_()
    : model()  {
    }
  Set_Robot_ModelRequest_(const ContainerAllocator& _alloc)
    : model(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;




  typedef boost::shared_ptr< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Set_Robot_ModelRequest_

typedef ::t2_package::Set_Robot_ModelRequest_<std::allocator<void> > Set_Robot_ModelRequest;

typedef boost::shared_ptr< ::t2_package::Set_Robot_ModelRequest > Set_Robot_ModelRequestPtr;
typedef boost::shared_ptr< ::t2_package::Set_Robot_ModelRequest const> Set_Robot_ModelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace t2_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 't2_package': ['/home/jmdbo/TRSA/src/t2_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0147e4f36cba5cda7fa39c089e493413";
  }

  static const char* value(const ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0147e4f36cba5cdaULL;
  static const uint64_t static_value2 = 0x7fa39c089e493413ULL;
};

template<class ContainerAllocator>
struct DataType< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t2_package/Set_Robot_ModelRequest";
  }

  static const char* value(const ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string model\n\
";
  }

  static const char* value(const ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Set_Robot_ModelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t2_package::Set_Robot_ModelRequest_<ContainerAllocator>& v)
  {
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T2_PACKAGE_MESSAGE_SET_ROBOT_MODELREQUEST_H
