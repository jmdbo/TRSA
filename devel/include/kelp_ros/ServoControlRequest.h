// Generated by gencpp from file kelp_ros/ServoControlRequest.msg
// DO NOT EDIT!


#ifndef KELP_ROS_MESSAGE_SERVOCONTROLREQUEST_H
#define KELP_ROS_MESSAGE_SERVOCONTROLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kelp_ros
{
template <class ContainerAllocator>
struct ServoControlRequest_
{
  typedef ServoControlRequest_<ContainerAllocator> Type;

  ServoControlRequest_()
    : axis()
    , angle(0.0)  {
      axis.assign(false);
  }
  ServoControlRequest_(const ContainerAllocator& _alloc)
    : axis()
    , angle(0.0)  {
      axis.assign(false);
  }



   typedef boost::array<uint8_t, 3>  _axis_type;
  _axis_type axis;

   typedef float _angle_type;
  _angle_type angle;




  typedef boost::shared_ptr< ::kelp_ros::ServoControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kelp_ros::ServoControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ServoControlRequest_

typedef ::kelp_ros::ServoControlRequest_<std::allocator<void> > ServoControlRequest;

typedef boost::shared_ptr< ::kelp_ros::ServoControlRequest > ServoControlRequestPtr;
typedef boost::shared_ptr< ::kelp_ros::ServoControlRequest const> ServoControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kelp_ros::ServoControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kelp_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kelp_ros::ServoControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kelp_ros::ServoControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kelp_ros::ServoControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "500ec74f91ed9386e456621950e9e200";
  }

  static const char* value(const ::kelp_ros::ServoControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x500ec74f91ed9386ULL;
  static const uint64_t static_value2 = 0xe456621950e9e200ULL;
};

template<class ContainerAllocator>
struct DataType< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kelp_ros/ServoControlRequest";
  }

  static const char* value(const ::kelp_ros::ServoControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[3] axis\n\
float32 angle\n\
";
  }

  static const char* value(const ::kelp_ros::ServoControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.axis);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ServoControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kelp_ros::ServoControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kelp_ros::ServoControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "axis[]" << std::endl;
    for (size_t i = 0; i < v.axis.size(); ++i)
    {
      s << indent << "  axis[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.axis[i]);
    }
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KELP_ROS_MESSAGE_SERVOCONTROLREQUEST_H
