// Generated by gencpp from file t8_package/cup_info.msg
// DO NOT EDIT!


#ifndef T8_PACKAGE_MESSAGE_CUP_INFO_H
#define T8_PACKAGE_MESSAGE_CUP_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace t8_package
{
template <class ContainerAllocator>
struct cup_info_
{
  typedef cup_info_<ContainerAllocator> Type;

  cup_info_()
    : Header()
    , Group_number(0)
    , Object_position()
    , Bag_name()
    , Thermal_label(0)  {
    }
  cup_info_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , Group_number(0)
    , Object_position(_alloc)
    , Bag_name(_alloc)
    , Thermal_label(0)  {
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef int16_t _Group_number_type;
  _Group_number_type Group_number;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _Object_position_type;
  _Object_position_type Object_position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Bag_name_type;
  _Bag_name_type Bag_name;

   typedef int8_t _Thermal_label_type;
  _Thermal_label_type Thermal_label;




  typedef boost::shared_ptr< ::t8_package::cup_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::t8_package::cup_info_<ContainerAllocator> const> ConstPtr;

}; // struct cup_info_

typedef ::t8_package::cup_info_<std::allocator<void> > cup_info;

typedef boost::shared_ptr< ::t8_package::cup_info > cup_infoPtr;
typedef boost::shared_ptr< ::t8_package::cup_info const> cup_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::t8_package::cup_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::t8_package::cup_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace t8_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 't8_package': ['/home/jmdbo/TRSA/src/t8_package/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::t8_package::cup_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::t8_package::cup_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t8_package::cup_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::t8_package::cup_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t8_package::cup_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::t8_package::cup_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::t8_package::cup_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "437405b3f313d7278c82c4631f055dec";
  }

  static const char* value(const ::t8_package::cup_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x437405b3f313d727ULL;
  static const uint64_t static_value2 = 0x8c82c4631f055decULL;
};

template<class ContainerAllocator>
struct DataType< ::t8_package::cup_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "t8_package/cup_info";
  }

  static const char* value(const ::t8_package::cup_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::t8_package::cup_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n\
int16 Group_number\n\
geometry_msgs/Point Object_position\n\
string Bag_name\n\
int8 Thermal_label\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::t8_package::cup_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::t8_package::cup_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.Group_number);
      stream.next(m.Object_position);
      stream.next(m.Bag_name);
      stream.next(m.Thermal_label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct cup_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::t8_package::cup_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::t8_package::cup_info_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "Group_number: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Group_number);
    s << indent << "Object_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.Object_position);
    s << indent << "Bag_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Bag_name);
    s << indent << "Thermal_label: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Thermal_label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // T8_PACKAGE_MESSAGE_CUP_INFO_H
